name: Pull Request Cockpit

on:
  pull_request:
    paths:
      - ".github/workflows/pr_cockpit.yml"
      - "rust/stackable-cockpitd"
      - "rust/stackable-cockpit"
      - "docs/modules/cockpit"
      - "docs/modules/ROOT"
      - "Cargo.lock"
      - "deploy"
      - "docker"
      - "go.sum"

env:
  RUST_VERSION: 1.70.0
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: "0"
  CARGO_PROFILE_DEV_DEBUG: "0"
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: "-D warnings"
  RUST_LOG: "info"

jobs:
  build:
    name: Build stackable-cockpitd for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@0e66bd3e6b38ec0ad5312288c83e47c143e6b09e # v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@359a70e43a0bb8a13953b04a90f76428b4959bb6 # v2.2.0
        with:
          key: build-stackable-cockpit-${{ matrix.target }}
      - name: Build for non-Windows
        if: matrix.os != 'windows-latest'
        run: cargo build --target ${{ matrix.target }} -p stackable-cockpitd --all-features
